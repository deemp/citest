name: Main CI workflow

on:
  workflow_dispatch:
  push:
  pull_request:

env:
  commit-and-push: |
    tree -a /nix > "$name.txt"
    cp /nix/var/nix/db/db.sqlite "$name.sqlite"
    sqlite3 "$name.sqlite" .dump > "$name.sql"
    git add "$name.txt" "$name.sqlite" "$name.sql"
    git commit -m "$name"
    git push

jobs:
  make-cache:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v28

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5.2.1
        with:
          primary-key: similar-cache-individual-${{ hashFiles('.github/workflows/main.yml') }}
          purge: true
          # purge all versions of the cache
          purge-prefixes: similar-cache-individual-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - name: Configure git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
            
      - name: Before success
        env:
          name: before-success
        run: ${{ env.commit-and-push }}
        
      - name: Build
        run: nix build
        
      - name: After success
        env:
          name: after-success
        run: ${{ env.commit-and-push }}

  check-cache:
    runs-on: ubuntu-22.04
    needs: [ "make-cache" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v28

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5.2.1
        with:
          primary-key: similar-cache-individual-${{ hashFiles('.github/workflows/main.yml') }}
        
      - name: Configure git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
      
      - name: Pull changes
        run: git pull
          
      - name: Before failure
        env:
          name: before-failure
        run: ${{ env.commit-and-push }}
      
      - name: Change a file
        run: printf "\n\n" >> lib/citest.ex
    
      - name: Build
        run: nix build
        
      - name: After failure
        if: always()
        env:
          name: after-failure
        run: ${{ env.commit-and-push }}

      - name: Setup tmate session
        if: always()
        uses: mxschmitt/action-tmate@v3
